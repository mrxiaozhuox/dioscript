use dioxus::prelude::*;
use dsx::View;
use indoc::indoc;

fn main() {
    dioxus_web::launch(App);
}

#[allow(non_snake_case)]
pub fn App(cx: Scope) -> Element {
    let create_eval = use_eval(&cx);
    let mut eval = create_eval(indoc! {"
        setTimeout(() => {
            let editor = window.editor;
            editor.onDidChangeModelContent(function (_e) {
                let content = editor.getValue();
                dioxus.send(content);
            });
        }, 800);
    "}).unwrap();

    let editor_content = use_state(cx, String::new);
    use_coroutine(cx,|rx: UnboundedReceiver<String>| {
        to_owned![eval, editor_content];
        async move {
            while let Ok(v) = eval.recv().await {
                editor_content.set(v.to_string());
            }
        }
    });
    

    cx.render(rsx! {
        script {
            r#type: "module",
            src: "/editor.js"
        }
        div {
            class: "mt-4 mx-auto px-8",
            div {
                class: "flex flex-row gap-4",
                div {
                    class: "basis-1/2",
                    div {
                        id: "monaco",
                        class: "w-full h-[700px] border border-gray-400",
                    }
                }
                div {
                    class: "basis-1/2",
                    div {
                        class: "w-full h-[700px] border border-gray-400",
                        View {
                          code: "{editor_content}".to_string(),  
                        }
                    }
                }
            }
        }
    })
}
